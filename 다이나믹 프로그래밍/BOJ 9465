문제 번호 : BOJ 9465

solved.ac : silver 1

알고리즘 분류 : dp

문제 설명 :
상근이의 여동생 상냥이는 문방구에서 스티커 2n개를 구매했다. 스티커는 그림 (a)와 같이 2행 n열로 배치되어 있다. 상냥이는 스티커를 이용해 책상을 꾸미려고 한다.

상냥이가 구매한 스티커의 품질은 매우 좋지 않다. 스티커 한 장을 떼면, 그 스티커와 변을 공유하는 스티커는 모두 찢어져서 사용할 수 없게 된다. 즉, 뗀 스티커의 왼쪽, 오른쪽, 위, 아래에 있는 스티커는 사용할 수 없게 된다.

모든 스티커를 붙일 수 없게된 상냥이는 각 스티커에 점수를 매기고, 점수의 합이 최대가 되게 스티커를 떼어내려고 한다. 먼저, 그림 (b)와 같이 각 스티커에 점수를 매겼다.
상냥이가 뗄 수 있는 스티커의 점수의 최댓값을 구하는 프로그램을 작성하시오. 즉, 2n개의 스티커 중에서 점수의 합이 최대가 되면서 서로 변을 공유 하지 않는 스티커 집합을 구해야 한다.

위의 그림의 경우에 점수가 50, 50, 100, 60인 스티커를 고르면, 점수는 260이 되고 이 것이 최대 점수이다. 가장 높은 점수를 가지는 두 스티커 (100과 70)은 변을 공유하기 때문에, 동시에 뗄 수 없다.


입력 : 
첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스의 첫째 줄에는 n (1 ≤ n ≤ 100,000)이 주어진다. 다음 두 줄에는 n개의 정수가 주어지며, 각 정수는 그 위치에 해당하는 스티커의 점수이다.
연속하는 두 정수 사이에는 빈 칸이 하나 있다. 점수는 0보다 크거나 같고, 100보다 작거나 같은 정수이다. 


출력 : 
각 테스트 케이스 마다, 2n개의 스티커 중에서 두 변을 공유하지 않는 스티커 점수의 최댓값을 출력한다.

---------------------------------------------------------------

나만의 해석 : 스티커의 상하좌우를 사용할 수 없게 된다고 했지만 2*n의 범위에서 왼쪽에서 오른쪽으로 합을 계산한다고 생각하면 각 행에서 한쪽 방향만 신경쓰면 된다. 

시간 복잡도 추론 : n이 100,000이기 때문에 브루트포스는 불가능하고 dp를 이용해서 누적합을 계산하는 방법이 좋아보임. O(N)


문제 풀이 아이디어 : 
왼쪽에서 오른쪽으로 가는 진행상황에서
한 블럭을 선택하게 될 경우, 대각선 블럭을 고르거나 아무것도 고르지 않거나를 선택할 수 있다.
아무것도 고르지 않는 경우는 곧 2칸 이상을 건너뛴다는 건데, 3칸부터는 대각으로도 갈 수 있어 건너뛴 값이 더 작아 의미가 없기 때문에 2칸을 건너뛴 경우와 대각선의 경우 2가지만 비교하면 된다.


필요한 자료구조 : 배열

테스트 케이스 :
2
5
50 10 100 20 40
30 50 70 10 60
7
10 30 10 50 100 20 40
20 40 30 50 60 20 80
----------------------
260
290


코드 : 
#include <bits/stdc++.h>
#define INF 1e9+7


using namespace std;

int sticky[2][100001];
int dp[2][1000001];
int T, N;

void cal() {
    cin >> N;
    for(int i = 0; i < 2; i++) { //테스트 케이스마다 배열 초기화
        for(int j = 0; j <= 1000000; j++) {
            dp[i][j] = 0;
        }
    }
    sticky[0][0] = 0;
    sticky[1][0] = 0; 
    for(int i = 0; i < 2; i++) { //입력
        for(int j = 1; j <= N; j++) {
            cin >> sticky[i][j];
        }
    }
    dp[0][1] = sticky[0][1];
    dp[1][1] = sticky[1][1];
    for(int j = 2; j <= N; j++) {
        dp[0][j] = max(dp[1][j-1],dp[1][j-2]) + sticky[0][j];
        dp[1][j] = max(dp[0][j-1],dp[0][j-2]) + sticky[1][j];
    }
    int ans = max(dp[0][N],dp[1][N]);
    cout << ans << "\n";
}

void input() {
   cin >> T;
   for(int t = 0;t < T; t++) {
       cal();
   }
}

int main() {
    ios::sync_with_stdio(true); cin.tie(0); cout.tie(0);
    
    input();

    return 0;
}


원본링크 :
https://www.acmicpc.net/problem/9465

참고 문헌 : 
