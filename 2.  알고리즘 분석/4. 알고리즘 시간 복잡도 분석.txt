알고리즘 시간 복잡도
선형 시간 알고리즘 : ex. 이동 평균 계산하기
선형 이하 시간 알고리즘 : ex.특정 시점의 사진 찾기 알고리즘(이진 탐색)
다항 시간 알고리즘 : 모든 답 후보 평가하기
지수 시간 알고리즘

시간 복잡도 : 알고리즘 수행 시간의 기준, 알고리즘이 실행되는 동안 수행하는 기본적인 연산의 수를 입력의 크기에 대한 함수로 표현한 것
기본적인 연산 : 쪼갤 수 없는 최소 크기의 연산
ex. 32비트 정수의 사칙연산, 실수형 변수의 크기 비교, 변수 대입하기
기본 연산이 아닌 것
ex. 정수 배열 정렬하기, 문자열 비교하기, 소인수 분해하기

점근적 시간 표기  : O(빅-오) 표기법, 가장 빠르게 증가하는 항만을 남긴채 나머지를 다 버리는 표기법
O 표기법의 의미 : N에 대한 f(N)이 주어질 때, f(N)=O(g(N)), 어떤 큰 수 N0와 C>0를 선택하면
N0<N인 모든 N에 대해 |f(N)|<=C*|g(N)|이 참이 될 수 있다.
즉, 대략적으로 함수의 상한을 나타낸다.


분할 상환 분석 : 시간복잡도를 반복문의 개수를 세는 것만으로 정확하게 결정하지 못할 때
이 책에서 정확하게 다루진 않지만, N개의 작업들에 대해 각각 시간을 알 순 없지만 전체 평균 시간을 알 수 있기 때문에 이를 이용하여 시간을 계산한다.

주먹구구 법칙 : 
입력 크기를 통해 시간복잡도와 알고리즘을 짐작하는 것
고려 사항
1. 시간 복잡도가 실제 수행 속도를 반영하지 못하는 경우
2. 반복문의 내부가 복잡한 경우
3. 메모리 사용 패턴이 복잡한 경우
4. 언어와 컴파일러의 차이
5. 구형 컴퓨터를 사용하는 경우

사용 예시
N=1,000 : N^3은 10억이 넘어가기 때문에 사용에 주의.
N=10,000 : N^3은 1조이기 때문에 가능성이 거의 없음, N^2은 1억 정도이기 때문에 사용에 주의, 하지만 충분히 돌아감.
N=100,000 : N^2는 100억이기 때문에 시간에 돌아갈 가능성 낮음, NlgN은 2천만 정도이므로 원할하게 돌아감. 