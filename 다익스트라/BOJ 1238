문제 번호 : BOJ 1238

solved.ac : gold 3

알고리즘 분류 : 최단거리, 다익스트라

문제 설명 :
N개의 숫자로 구분된 각각의 마을에 한 명의 학생이 살고 있다.

어느 날 이 N명의 학생이 X (1 ≤ X ≤ N)번 마을에 모여서 파티를 벌이기로 했다. 이 마을 사이에는 총 M개의 단방향 도로들이 있고 i번째 길을 지나는데 Ti(1 ≤ Ti ≤ 100)의 시간을 소비한다.

각각의 학생들은 파티에 참석하기 위해 걸어가서 다시 그들의 마을로 돌아와야 한다. 하지만 이 학생들은 워낙 게을러서 최단 시간에 오고 가기를 원한다.

이 도로들은 단방향이기 때문에 아마 그들이 오고 가는 길이 다를지도 모른다. N명의 학생들 중 오고 가는데 가장 많은 시간을 소비하는 학생은 누구일지 구하여라.

입력 : 
첫째 줄에 N(1 ≤ N ≤ 1,000), M(1 ≤ M ≤ 10,000), X가 공백으로 구분되어 입력된다. 두 번째 줄부터 M+1번째 줄까지 i번째 도로의 시작점, 끝점, 그리고 이 도로를 지나는데 필요한 소요시간 Ti가 들어온다.
시작점과 끝점이 같은 도로는 없으며, 시작점과 한 도시 A에서 다른 도시 B로 가는 도로의 개수는 최대 1개이다.

모든 학생들은 집에서 X에 갈수 있고, X에서 집으로 돌아올 수 있는 데이터만 입력으로 주어진다.

출력 : 
첫 번째 줄에 N명의 학생들 중 오고 가는데 가장 오래 걸리는 학생의 소요시간을 출력한다.


---------------------------------------------------------------

나만의 해석 : N개의 노드와 M개의 단방향 간선, Ti 양수 가중치를 이용한 최단거리 계산 문제

시간 복잡도 추론 : 1000 * 10000 = 10,000,000 O(v^2)까진 가능

문제 풀이 아이디어 : 양수 가중치임을 이용하여 다익스트라 알고리즘을 활용하고,
단방향 간선이라는 점에서 노드->목적지까지의 다익스트라와 목적지->노드까지의 다익스트라를 분할하여 계산.
N번째 노드->목적지까지 : N번의 다익스트라 연산
목적지->노드까지 : 1번의 다익스트라 연산
이 두 연산의 결과값의 합이 각 노드의 최단거리가 되고 이 중 가장 큰 값을 가지는 노드를 찾으면 됨.

필요한 자료구조 : 배열, 벡터, 우선순위 큐

테스트 케이스 :
4 8 2
1 2 4
1 3 2
1 4 7
2 1 1
2 3 5
3 1 2
3 4 4
4 2 3
------
10

코드 : 
#include <iostream>
#include<vector>
#include<queue>
#define INF 1e9+7

using namespace std;

int N,M,X;
vector<pair<int,int>> graph[2][1001]; //정방향, 역방향 간선 모두 입력
vector<int> dist[2]; 


void input() {
    cin>>N>>M>>X;
    int u,v,t;
    for(int i=0;i<M;i++) {
        cin>>u>>v>>t;
        graph[0][u].push_back(make_pair(t,v)); 
        graph[1][v].push_back(make_pair(t,u)); 
    }
    dist[0].resize(N+1, INF); //무한대의 거리로 초기화
    dist[1].resize(N+1, INF); //무한대의 거리로 초기화
}

void Dijsktra(int k) {
    dist[k][X] = 0;
    priority_queue< pair<int,int>, vector<pair<int,int>>, greater<pair<int, int>> > pq;
    pq.push({0,X});
    
    while(!pq.empty()) {
        int min_cost = pq.top().first;
        int cur = pq.top().second;
        pq.pop();
        
        if(min_cost>dist[k][cur]) continue;
        
        for(int i=0;i<graph[k][cur].size();i++) {
            int next_cost = min_cost + graph[k][cur][i].first ;
            int next = graph[k][cur][i].second;
            
            if(next_cost < dist[k][next]) {
                dist[k][next] = next_cost;
                pq.push(make_pair(next_cost,next));
            }
        }
        
    }
}

int main() {
    ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
    
    input();
    
    Dijsktra(0); //정점들 -> X까지의 최단 거리, 모든 노드들에 대해 계산해야 됨.
    
    Dijsktra(1); //X -> 정점들까지의 최단 거리, 이건 한번만 계산하면 됨
    
    int ans = 0;
    
    for(int i = 1; i <= N; i++){
        ans = max(ans, dist[0][i] + dist[1][i]); //양방향 가중치의 합
    }
    
    cout << ans;
    
    return 0;
}

원본링크 :
https://www.acmicpc.net/problem/1238

참고 문헌 : 
https://blog.naver.com/ndb796/221234424646 
