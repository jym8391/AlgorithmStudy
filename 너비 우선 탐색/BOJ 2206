문제 번호 : BOJ 2206

solved.ac : gold 3

알고리즘 분류 : bfs

문제 설명 :
N×M의 행렬로 표현되는 맵이 있다. 맵에서 0은 이동할 수 있는 곳을 나타내고, 1은 이동할 수 없는 벽이 있는 곳을 나타낸다.
당신은 (1, 1)에서 (N, M)의 위치까지 이동하려 하는데, 이때 최단 경로로 이동하려 한다.
최단경로는 맵에서 가장 적은 개수의 칸을 지나는 경로를 말하는데, 이때 시작하는 칸과 끝나는 칸도 포함해서 센다.

만약에 이동하는 도중에 한 개의 벽을 부수고 이동하는 것이 좀 더 경로가 짧아진다면, 벽을 한 개 까지 부수고 이동하여도 된다.

한 칸에서 이동할 수 있는 칸은 상하좌우로 인접한 칸이다.

맵이 주어졌을 때, 최단 경로를 구해 내는 프로그램을 작성하시오..

입력 : 
첫째 줄에 N(1 ≤ N ≤ 1,000), M(1 ≤ M ≤ 1,000)이 주어진다. 다음 N개의 줄에 M개의 숫자로 맵이 주어진다. (1, 1)과 (N, M)은 항상 0이라고 가정하자.

출력 : 
첫째 줄에 최단 거리를 출력한다. 불가능할 때는 -1을 출력한다.

---------------------------------------------------------------

나만의 해석 : 그래프 탐색

시간 복잡도 추론 : 모든 칸이 벽이라고 가정했을 때, 모든 벽을 부순다면 
(1000 * 1000) ^ 2 이기 때문에 브루트포스는 불가능


문제 풀이 아이디어 : 
가중치가 없는 최단 경로는 무조건 BFS이다.
->처음에는 벽 부술 수 있는지 여부를 전역 변수로 설정하여 백트래킹으로 해결하려 했는데, 특정 칸에 처음 도달했을 때까지의 경로의 길이가 다른 경로를 통해 도달한 길이보다 짧다는 보장이 전혀 없기 때문에 BFS를 사용해야 됨.
벽을 부순 시점에서 벽을 부수고 온 경로와 그렇지 않은 경로를 구분할 필요가 있음.
visited 배열을 둘로 나누어 생각해야 됨. 현재 상태가 최적의 경로는 아니지만, 벽을 더 부술 수 있는 상태에서 벽을 부쉈을 때 최적인 경로가 나올 수도 있기 때문


조건 1. 범위를 벗어나지 않는지?
조건 2. 방문한 적 있는지?
조건 3. 벽이지만 뚫을 기회가 있는지?


필요한 자료구조 : 배열, 큐

테스트 케이스 :
6 4
0100
1110
1000
0000
0111
0000
------
15

4 4
0111
1111
1111
1110
------
-1

코드 : 
#include <bits/stdc++.h>

using namespace std;

int N,M;
int Maze[1001][1001];
int visited[1001][1001][2]; //0이면 벽을 부순 세계선, 1이면 벽을 부수지 않은 세계선
int dx[4] ={0,0,1,-1};
int dy[4] = {-1,1,0,0};


struct pos {
    int y;
    int x;
    int breakingWall;
};

void input() {
    cin>>N>>M;
    for(int i=1;i<=N;i++){
        for(int j=1;j<=M;j++) {
            scanf("%1d",&Maze[i][j]);
        }
    }
}

int find(void) {
    queue<pos> Q;
    visited[1][1][0] = 1;
    Q.push({1,1,0});
 
    while(!Q.empty()) {
        pos cur = Q.front();
        Q.pop();
 
        if (cur.y == N && cur.x == M) return visited[cur.y][cur.x][cur.breakingWall];
 
        for (int i = 0; i < 4; i++) {
            pos next;
            next.y = cur.y + dy[i];
            next.x = cur.x + dx[i];
            next.breakingWall = cur.breakingWall;
 
            if (next.y < 1 || next.y > N || next.x < 1 || next.x > M) continue; //범위를 벗어난 경우
            if (visited[next.y][next.x][cur.breakingWall]) continue; //방문한 적 있는 곳인 경우
 
            if (Maze[next.y][next.x] == 0) { //벽이 아닌 경우 
                visited[next.y][next.x][next.breakingWall] = visited[cur.y][cur.x][cur.breakingWall] + 1;
                Q.push({next.y,next.x,cur.breakingWall});
            }
            if (Maze[next.y][next.x] == 1 && next.breakingWall == 0) { //벽인데 부술 수 있는 경우
                visited[next.y][next.x][1] = visited[cur.y][cur.x][cur.breakingWall] + 1;
                next.breakingWall = 1; //벽을 더이상 부술 수 없음
                Q.push(next);
            }
        }
    }
    return -1; //최단 경로가 없다면 -1 출력
    
}

int main() {
    ios::sync_with_stdio(true); cin.tie(0); cout.tie(0);
    
    input();
    
    cout << find() << "\n"; //bfs
    
    return 0;
}

원본링크 :
https://www.acmicpc.net/problem/2206

참고 문헌 : 
https://www.acmicpc.net/board/view/27386
